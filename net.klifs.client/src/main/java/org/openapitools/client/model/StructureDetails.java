/*
 * KLIFS API
 * Dynamically interact with the rich content of KLIFS: the structural kinase database
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StructureDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-21T14:12:18.837505154+01:00[Europe/Amsterdam]")
public class StructureDetails {
  public static final String SERIALIZED_NAME_STRUCTURE_I_D = "structure_ID";
  @SerializedName(SERIALIZED_NAME_STRUCTURE_I_D)
  private Integer structureID;

  public static final String SERIALIZED_NAME_KINASE = "kinase";
  @SerializedName(SERIALIZED_NAME_KINASE)
  private String kinase;

  public static final String SERIALIZED_NAME_SPECIES = "species";
  @SerializedName(SERIALIZED_NAME_SPECIES)
  private String species;

  public static final String SERIALIZED_NAME_KINASE_I_D = "kinase_ID";
  @SerializedName(SERIALIZED_NAME_KINASE_I_D)
  private Integer kinaseID;

  public static final String SERIALIZED_NAME_PDB = "pdb";
  @SerializedName(SERIALIZED_NAME_PDB)
  private String pdb;

  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_CHAIN = "chain";
  @SerializedName(SERIALIZED_NAME_CHAIN)
  private String chain;

  public static final String SERIALIZED_NAME_RMSD1 = "rmsd1";
  @SerializedName(SERIALIZED_NAME_RMSD1)
  private Float rmsd1;

  public static final String SERIALIZED_NAME_RMSD2 = "rmsd2";
  @SerializedName(SERIALIZED_NAME_RMSD2)
  private Float rmsd2;

  public static final String SERIALIZED_NAME_POCKET = "pocket";
  @SerializedName(SERIALIZED_NAME_POCKET)
  private String pocket;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private Float resolution;

  public static final String SERIALIZED_NAME_QUALITY_SCORE = "quality_score";
  @SerializedName(SERIALIZED_NAME_QUALITY_SCORE)
  private Float qualityScore;

  public static final String SERIALIZED_NAME_MISSING_RESIDUES = "missing_residues";
  @SerializedName(SERIALIZED_NAME_MISSING_RESIDUES)
  private Integer missingResidues;

  public static final String SERIALIZED_NAME_MISSING_ATOMS = "missing_atoms";
  @SerializedName(SERIALIZED_NAME_MISSING_ATOMS)
  private Integer missingAtoms;

  public static final String SERIALIZED_NAME_LIGAND = "ligand";
  @SerializedName(SERIALIZED_NAME_LIGAND)
  private String ligand;

  public static final String SERIALIZED_NAME_ALLOSTERIC_LIGAND = "allosteric_ligand";
  @SerializedName(SERIALIZED_NAME_ALLOSTERIC_LIGAND)
  private String allostericLigand;

  public static final String SERIALIZED_NAME_D_F_G = "DFG";
  @SerializedName(SERIALIZED_NAME_D_F_G)
  private String DFG;

  public static final String SERIALIZED_NAME_A_C_HELIX = "aC_helix";
  @SerializedName(SERIALIZED_NAME_A_C_HELIX)
  private String aCHelix;

  public static final String SERIALIZED_NAME_GRICH_DISTANCE = "Grich_distance";
  @SerializedName(SERIALIZED_NAME_GRICH_DISTANCE)
  private Float grichDistance;

  public static final String SERIALIZED_NAME_GRICH_ANGLE = "Grich_angle";
  @SerializedName(SERIALIZED_NAME_GRICH_ANGLE)
  private Float grichAngle;

  public static final String SERIALIZED_NAME_GRICH_ROTATION = "Grich_rotation";
  @SerializedName(SERIALIZED_NAME_GRICH_ROTATION)
  private Float grichRotation;

  public static final String SERIALIZED_NAME_FRONT = "front";
  @SerializedName(SERIALIZED_NAME_FRONT)
  private Boolean front;

  public static final String SERIALIZED_NAME_GATE = "gate";
  @SerializedName(SERIALIZED_NAME_GATE)
  private Boolean gate;

  public static final String SERIALIZED_NAME_BACK = "back";
  @SerializedName(SERIALIZED_NAME_BACK)
  private Boolean back;

  public static final String SERIALIZED_NAME_FP_I = "fp_I";
  @SerializedName(SERIALIZED_NAME_FP_I)
  private Boolean fpI;

  public static final String SERIALIZED_NAME_FP_I_I = "fp_II";
  @SerializedName(SERIALIZED_NAME_FP_I_I)
  private Boolean fpII;

  public static final String SERIALIZED_NAME_BP_I_A = "bp_I_A";
  @SerializedName(SERIALIZED_NAME_BP_I_A)
  private Boolean bpIA;

  public static final String SERIALIZED_NAME_BP_I_B = "bp_I_B";
  @SerializedName(SERIALIZED_NAME_BP_I_B)
  private Boolean bpIB;

  public static final String SERIALIZED_NAME_BP_I_I_IN = "bp_II_in";
  @SerializedName(SERIALIZED_NAME_BP_I_I_IN)
  private Boolean bpIIIn;

  public static final String SERIALIZED_NAME_BP_I_I_A_IN = "bp_II_A_in";
  @SerializedName(SERIALIZED_NAME_BP_I_I_A_IN)
  private Boolean bpIIAIn;

  public static final String SERIALIZED_NAME_BP_I_I_B_IN = "bp_II_B_in";
  @SerializedName(SERIALIZED_NAME_BP_I_I_B_IN)
  private Boolean bpIIBIn;

  public static final String SERIALIZED_NAME_BP_I_I_OUT = "bp_II_out";
  @SerializedName(SERIALIZED_NAME_BP_I_I_OUT)
  private Boolean bpIIOut;

  public static final String SERIALIZED_NAME_BP_I_I_B = "bp_II_B";
  @SerializedName(SERIALIZED_NAME_BP_I_I_B)
  private Boolean bpIIB;

  public static final String SERIALIZED_NAME_BP_I_I_I = "bp_III";
  @SerializedName(SERIALIZED_NAME_BP_I_I_I)
  private Boolean bpIII;

  public static final String SERIALIZED_NAME_BP_I_V = "bp_IV";
  @SerializedName(SERIALIZED_NAME_BP_I_V)
  private Boolean bpIV;

  public static final String SERIALIZED_NAME_BP_V = "bp_V";
  @SerializedName(SERIALIZED_NAME_BP_V)
  private Boolean bpV;

  public StructureDetails() {
  }

  public StructureDetails structureID(Integer structureID) {
    
    this.structureID = structureID;
    return this;
  }

   /**
   * KLIFS ID for a specific kinase structure
   * @return structureID
  **/
  @javax.annotation.Nonnull
  public Integer getStructureID() {
    return structureID;
  }


  public void setStructureID(Integer structureID) {
    this.structureID = structureID;
  }


  public StructureDetails kinase(String kinase) {
    
    this.kinase = kinase;
    return this;
  }

   /**
   * HGNC gene symbol for a specific kinase structure
   * @return kinase
  **/
  @javax.annotation.Nullable
  public String getKinase() {
    return kinase;
  }


  public void setKinase(String kinase) {
    this.kinase = kinase;
  }


  public StructureDetails species(String species) {
    
    this.species = species;
    return this;
  }

   /**
   * Species of a specific kinase structure (e.g. human)
   * @return species
  **/
  @javax.annotation.Nonnull
  public String getSpecies() {
    return species;
  }


  public void setSpecies(String species) {
    this.species = species;
  }


  public StructureDetails kinaseID(Integer kinaseID) {
    
    this.kinaseID = kinaseID;
    return this;
  }

   /**
   * KLIFS ID for a specific kinase
   * @return kinaseID
  **/
  @javax.annotation.Nonnull
  public Integer getKinaseID() {
    return kinaseID;
  }


  public void setKinaseID(Integer kinaseID) {
    this.kinaseID = kinaseID;
  }


  public StructureDetails pdb(String pdb) {
    
    this.pdb = pdb;
    return this;
  }

   /**
   * 4-letter PDB-code for a given structure
   * @return pdb
  **/
  @javax.annotation.Nonnull
  public String getPdb() {
    return pdb;
  }


  public void setPdb(String pdb) {
    this.pdb = pdb;
  }


  public StructureDetails alt(String alt) {
    
    this.alt = alt;
    return this;
  }

   /**
   * Indicates the (alternate) model of the given structure
   * @return alt
  **/
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }


  public void setAlt(String alt) {
    this.alt = alt;
  }


  public StructureDetails chain(String chain) {
    
    this.chain = chain;
    return this;
  }

   /**
   * Indicates the chain of the given structure
   * @return chain
  **/
  @javax.annotation.Nonnull
  public String getChain() {
    return chain;
  }


  public void setChain(String chain) {
    this.chain = chain;
  }


  public StructureDetails rmsd1(Float rmsd1) {
    
    this.rmsd1 = rmsd1;
    return this;
  }

   /**
   * RMSD compared to the reference template for the superpose pocket
   * @return rmsd1
  **/
  @javax.annotation.Nonnull
  public Float getRmsd1() {
    return rmsd1;
  }


  public void setRmsd1(Float rmsd1) {
    this.rmsd1 = rmsd1;
  }


  public StructureDetails rmsd2(Float rmsd2) {
    
    this.rmsd2 = rmsd2;
    return this;
  }

   /**
   * RMSD compared to the reference template for the full pocket
   * @return rmsd2
  **/
  @javax.annotation.Nonnull
  public Float getRmsd2() {
    return rmsd2;
  }


  public void setRmsd2(Float rmsd2) {
    this.rmsd2 = rmsd2;
  }


  public StructureDetails pocket(String pocket) {
    
    this.pocket = pocket;
    return this;
  }

   /**
   * Alignment of the 85 pocket residues
   * @return pocket
  **/
  @javax.annotation.Nonnull
  public String getPocket() {
    return pocket;
  }


  public void setPocket(String pocket) {
    this.pocket = pocket;
  }


  public StructureDetails resolution(Float resolution) {
    
    this.resolution = resolution;
    return this;
  }

   /**
   * Resolution of the crystal struture
   * @return resolution
  **/
  @javax.annotation.Nullable
  public Float getResolution() {
    return resolution;
  }


  public void setResolution(Float resolution) {
    this.resolution = resolution;
  }


  public StructureDetails qualityScore(Float qualityScore) {
    
    this.qualityScore = qualityScore;
    return this;
  }

   /**
   * The quality score estimates the quality of the structure with respect to the binding pocket as well as the quality of the processing by KLIFS.
   * @return qualityScore
  **/
  @javax.annotation.Nonnull
  public Float getQualityScore() {
    return qualityScore;
  }


  public void setQualityScore(Float qualityScore) {
    this.qualityScore = qualityScore;
  }


  public StructureDetails missingResidues(Integer missingResidues) {
    
    this.missingResidues = missingResidues;
    return this;
  }

   /**
   * Number of residues missing in the pocket
   * @return missingResidues
  **/
  @javax.annotation.Nonnull
  public Integer getMissingResidues() {
    return missingResidues;
  }


  public void setMissingResidues(Integer missingResidues) {
    this.missingResidues = missingResidues;
  }


  public StructureDetails missingAtoms(Integer missingAtoms) {
    
    this.missingAtoms = missingAtoms;
    return this;
  }

   /**
   * Number of atoms missing from pocket residues (not including the missing residues)
   * @return missingAtoms
  **/
  @javax.annotation.Nonnull
  public Integer getMissingAtoms() {
    return missingAtoms;
  }


  public void setMissingAtoms(Integer missingAtoms) {
    this.missingAtoms = missingAtoms;
  }


  public StructureDetails ligand(String ligand) {
    
    this.ligand = ligand;
    return this;
  }

   /**
   * 3-letter PDB-code of the ligand within the main pocket
   * @return ligand
  **/
  @javax.annotation.Nullable
  public String getLigand() {
    return ligand;
  }


  public void setLigand(String ligand) {
    this.ligand = ligand;
  }


  public StructureDetails allostericLigand(String allostericLigand) {
    
    this.allostericLigand = allostericLigand;
    return this;
  }

   /**
   * 3-letter PDB-code of the ligand outside the main pocket
   * @return allostericLigand
  **/
  @javax.annotation.Nullable
  public String getAllostericLigand() {
    return allostericLigand;
  }


  public void setAllostericLigand(String allostericLigand) {
    this.allostericLigand = allostericLigand;
  }


  public StructureDetails DFG(String DFG) {
    
    this.DFG = DFG;
    return this;
  }

   /**
   * Conformation of the DFG motif
   * @return DFG
  **/
  @javax.annotation.Nullable
  public String getDFG() {
    return DFG;
  }


  public void setDFG(String DFG) {
    this.DFG = DFG;
  }


  public StructureDetails aCHelix(String aCHelix) {
    
    this.aCHelix = aCHelix;
    return this;
  }

   /**
   * Conformation of the alpha-C helix
   * @return aCHelix
  **/
  @javax.annotation.Nullable
  public String getaCHelix() {
    return aCHelix;
  }


  public void setaCHelix(String aCHelix) {
    this.aCHelix = aCHelix;
  }


  public StructureDetails grichDistance(Float grichDistance) {
    
    this.grichDistance = grichDistance;
    return this;
  }

   /**
   * Conformation of the G-rich loop - distance
   * @return grichDistance
  **/
  @javax.annotation.Nullable
  public Float getGrichDistance() {
    return grichDistance;
  }


  public void setGrichDistance(Float grichDistance) {
    this.grichDistance = grichDistance;
  }


  public StructureDetails grichAngle(Float grichAngle) {
    
    this.grichAngle = grichAngle;
    return this;
  }

   /**
   * Conformation of the G-rich loop - angle
   * @return grichAngle
  **/
  @javax.annotation.Nullable
  public Float getGrichAngle() {
    return grichAngle;
  }


  public void setGrichAngle(Float grichAngle) {
    this.grichAngle = grichAngle;
  }


  public StructureDetails grichRotation(Float grichRotation) {
    
    this.grichRotation = grichRotation;
    return this;
  }

   /**
   * Conformation of the G-rich loop - rotation
   * @return grichRotation
  **/
  @javax.annotation.Nullable
  public Float getGrichRotation() {
    return grichRotation;
  }


  public void setGrichRotation(Float grichRotation) {
    this.grichRotation = grichRotation;
  }


  public StructureDetails front(Boolean front) {
    
    this.front = front;
    return this;
  }

   /**
   * The ligand binds to the front pocket
   * @return front
  **/
  @javax.annotation.Nullable
  public Boolean getFront() {
    return front;
  }


  public void setFront(Boolean front) {
    this.front = front;
  }


  public StructureDetails gate(Boolean gate) {
    
    this.gate = gate;
    return this;
  }

   /**
   * The ligand binds to the gate area
   * @return gate
  **/
  @javax.annotation.Nullable
  public Boolean getGate() {
    return gate;
  }


  public void setGate(Boolean gate) {
    this.gate = gate;
  }


  public StructureDetails back(Boolean back) {
    
    this.back = back;
    return this;
  }

   /**
   * The ligand binds to the back pocket
   * @return back
  **/
  @javax.annotation.Nullable
  public Boolean getBack() {
    return back;
  }


  public void setBack(Boolean back) {
    this.back = back;
  }


  public StructureDetails fpI(Boolean fpI) {
    
    this.fpI = fpI;
    return this;
  }

   /**
   * The ligand binds to FP-I
   * @return fpI
  **/
  @javax.annotation.Nullable
  public Boolean getFpI() {
    return fpI;
  }


  public void setFpI(Boolean fpI) {
    this.fpI = fpI;
  }


  public StructureDetails fpII(Boolean fpII) {
    
    this.fpII = fpII;
    return this;
  }

   /**
   * The ligand binds to FP-II
   * @return fpII
  **/
  @javax.annotation.Nullable
  public Boolean getFpII() {
    return fpII;
  }


  public void setFpII(Boolean fpII) {
    this.fpII = fpII;
  }


  public StructureDetails bpIA(Boolean bpIA) {
    
    this.bpIA = bpIA;
    return this;
  }

   /**
   * The ligand binds to BP-I-A
   * @return bpIA
  **/
  @javax.annotation.Nullable
  public Boolean getBpIA() {
    return bpIA;
  }


  public void setBpIA(Boolean bpIA) {
    this.bpIA = bpIA;
  }


  public StructureDetails bpIB(Boolean bpIB) {
    
    this.bpIB = bpIB;
    return this;
  }

   /**
   * The ligand binds to BP-I-B
   * @return bpIB
  **/
  @javax.annotation.Nullable
  public Boolean getBpIB() {
    return bpIB;
  }


  public void setBpIB(Boolean bpIB) {
    this.bpIB = bpIB;
  }


  public StructureDetails bpIIIn(Boolean bpIIIn) {
    
    this.bpIIIn = bpIIIn;
    return this;
  }

   /**
   * The ligand binds to BP-II-in
   * @return bpIIIn
  **/
  @javax.annotation.Nullable
  public Boolean getBpIIIn() {
    return bpIIIn;
  }


  public void setBpIIIn(Boolean bpIIIn) {
    this.bpIIIn = bpIIIn;
  }


  public StructureDetails bpIIAIn(Boolean bpIIAIn) {
    
    this.bpIIAIn = bpIIAIn;
    return this;
  }

   /**
   * The ligand binds to BP-II-A-in
   * @return bpIIAIn
  **/
  @javax.annotation.Nullable
  public Boolean getBpIIAIn() {
    return bpIIAIn;
  }


  public void setBpIIAIn(Boolean bpIIAIn) {
    this.bpIIAIn = bpIIAIn;
  }


  public StructureDetails bpIIBIn(Boolean bpIIBIn) {
    
    this.bpIIBIn = bpIIBIn;
    return this;
  }

   /**
   * The ligand binds to BP-II-B-in
   * @return bpIIBIn
  **/
  @javax.annotation.Nullable
  public Boolean getBpIIBIn() {
    return bpIIBIn;
  }


  public void setBpIIBIn(Boolean bpIIBIn) {
    this.bpIIBIn = bpIIBIn;
  }


  public StructureDetails bpIIOut(Boolean bpIIOut) {
    
    this.bpIIOut = bpIIOut;
    return this;
  }

   /**
   * The ligand binds to BP-II-out
   * @return bpIIOut
  **/
  @javax.annotation.Nullable
  public Boolean getBpIIOut() {
    return bpIIOut;
  }


  public void setBpIIOut(Boolean bpIIOut) {
    this.bpIIOut = bpIIOut;
  }


  public StructureDetails bpIIB(Boolean bpIIB) {
    
    this.bpIIB = bpIIB;
    return this;
  }

   /**
   * The ligand binds to BP-II-B
   * @return bpIIB
  **/
  @javax.annotation.Nullable
  public Boolean getBpIIB() {
    return bpIIB;
  }


  public void setBpIIB(Boolean bpIIB) {
    this.bpIIB = bpIIB;
  }


  public StructureDetails bpIII(Boolean bpIII) {
    
    this.bpIII = bpIII;
    return this;
  }

   /**
   * The ligand binds to BP-III
   * @return bpIII
  **/
  @javax.annotation.Nullable
  public Boolean getBpIII() {
    return bpIII;
  }


  public void setBpIII(Boolean bpIII) {
    this.bpIII = bpIII;
  }


  public StructureDetails bpIV(Boolean bpIV) {
    
    this.bpIV = bpIV;
    return this;
  }

   /**
   * The ligand binds to BP-IV
   * @return bpIV
  **/
  @javax.annotation.Nullable
  public Boolean getBpIV() {
    return bpIV;
  }


  public void setBpIV(Boolean bpIV) {
    this.bpIV = bpIV;
  }


  public StructureDetails bpV(Boolean bpV) {
    
    this.bpV = bpV;
    return this;
  }

   /**
   * The ligand binds to BP-V
   * @return bpV
  **/
  @javax.annotation.Nullable
  public Boolean getBpV() {
    return bpV;
  }


  public void setBpV(Boolean bpV) {
    this.bpV = bpV;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructureDetails structureDetails = (StructureDetails) o;
    return Objects.equals(this.structureID, structureDetails.structureID) &&
        Objects.equals(this.kinase, structureDetails.kinase) &&
        Objects.equals(this.species, structureDetails.species) &&
        Objects.equals(this.kinaseID, structureDetails.kinaseID) &&
        Objects.equals(this.pdb, structureDetails.pdb) &&
        Objects.equals(this.alt, structureDetails.alt) &&
        Objects.equals(this.chain, structureDetails.chain) &&
        Objects.equals(this.rmsd1, structureDetails.rmsd1) &&
        Objects.equals(this.rmsd2, structureDetails.rmsd2) &&
        Objects.equals(this.pocket, structureDetails.pocket) &&
        Objects.equals(this.resolution, structureDetails.resolution) &&
        Objects.equals(this.qualityScore, structureDetails.qualityScore) &&
        Objects.equals(this.missingResidues, structureDetails.missingResidues) &&
        Objects.equals(this.missingAtoms, structureDetails.missingAtoms) &&
        Objects.equals(this.ligand, structureDetails.ligand) &&
        Objects.equals(this.allostericLigand, structureDetails.allostericLigand) &&
        Objects.equals(this.DFG, structureDetails.DFG) &&
        Objects.equals(this.aCHelix, structureDetails.aCHelix) &&
        Objects.equals(this.grichDistance, structureDetails.grichDistance) &&
        Objects.equals(this.grichAngle, structureDetails.grichAngle) &&
        Objects.equals(this.grichRotation, structureDetails.grichRotation) &&
        Objects.equals(this.front, structureDetails.front) &&
        Objects.equals(this.gate, structureDetails.gate) &&
        Objects.equals(this.back, structureDetails.back) &&
        Objects.equals(this.fpI, structureDetails.fpI) &&
        Objects.equals(this.fpII, structureDetails.fpII) &&
        Objects.equals(this.bpIA, structureDetails.bpIA) &&
        Objects.equals(this.bpIB, structureDetails.bpIB) &&
        Objects.equals(this.bpIIIn, structureDetails.bpIIIn) &&
        Objects.equals(this.bpIIAIn, structureDetails.bpIIAIn) &&
        Objects.equals(this.bpIIBIn, structureDetails.bpIIBIn) &&
        Objects.equals(this.bpIIOut, structureDetails.bpIIOut) &&
        Objects.equals(this.bpIIB, structureDetails.bpIIB) &&
        Objects.equals(this.bpIII, structureDetails.bpIII) &&
        Objects.equals(this.bpIV, structureDetails.bpIV) &&
        Objects.equals(this.bpV, structureDetails.bpV);
  }

  @Override
  public int hashCode() {
    return Objects.hash(structureID, kinase, species, kinaseID, pdb, alt, chain, rmsd1, rmsd2, pocket, resolution, qualityScore, missingResidues, missingAtoms, ligand, allostericLigand, DFG, aCHelix, grichDistance, grichAngle, grichRotation, front, gate, back, fpI, fpII, bpIA, bpIB, bpIIIn, bpIIAIn, bpIIBIn, bpIIOut, bpIIB, bpIII, bpIV, bpV);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructureDetails {\n");
    sb.append("    structureID: ").append(toIndentedString(structureID)).append("\n");
    sb.append("    kinase: ").append(toIndentedString(kinase)).append("\n");
    sb.append("    species: ").append(toIndentedString(species)).append("\n");
    sb.append("    kinaseID: ").append(toIndentedString(kinaseID)).append("\n");
    sb.append("    pdb: ").append(toIndentedString(pdb)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    rmsd1: ").append(toIndentedString(rmsd1)).append("\n");
    sb.append("    rmsd2: ").append(toIndentedString(rmsd2)).append("\n");
    sb.append("    pocket: ").append(toIndentedString(pocket)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    qualityScore: ").append(toIndentedString(qualityScore)).append("\n");
    sb.append("    missingResidues: ").append(toIndentedString(missingResidues)).append("\n");
    sb.append("    missingAtoms: ").append(toIndentedString(missingAtoms)).append("\n");
    sb.append("    ligand: ").append(toIndentedString(ligand)).append("\n");
    sb.append("    allostericLigand: ").append(toIndentedString(allostericLigand)).append("\n");
    sb.append("    DFG: ").append(toIndentedString(DFG)).append("\n");
    sb.append("    aCHelix: ").append(toIndentedString(aCHelix)).append("\n");
    sb.append("    grichDistance: ").append(toIndentedString(grichDistance)).append("\n");
    sb.append("    grichAngle: ").append(toIndentedString(grichAngle)).append("\n");
    sb.append("    grichRotation: ").append(toIndentedString(grichRotation)).append("\n");
    sb.append("    front: ").append(toIndentedString(front)).append("\n");
    sb.append("    gate: ").append(toIndentedString(gate)).append("\n");
    sb.append("    back: ").append(toIndentedString(back)).append("\n");
    sb.append("    fpI: ").append(toIndentedString(fpI)).append("\n");
    sb.append("    fpII: ").append(toIndentedString(fpII)).append("\n");
    sb.append("    bpIA: ").append(toIndentedString(bpIA)).append("\n");
    sb.append("    bpIB: ").append(toIndentedString(bpIB)).append("\n");
    sb.append("    bpIIIn: ").append(toIndentedString(bpIIIn)).append("\n");
    sb.append("    bpIIAIn: ").append(toIndentedString(bpIIAIn)).append("\n");
    sb.append("    bpIIBIn: ").append(toIndentedString(bpIIBIn)).append("\n");
    sb.append("    bpIIOut: ").append(toIndentedString(bpIIOut)).append("\n");
    sb.append("    bpIIB: ").append(toIndentedString(bpIIB)).append("\n");
    sb.append("    bpIII: ").append(toIndentedString(bpIII)).append("\n");
    sb.append("    bpIV: ").append(toIndentedString(bpIV)).append("\n");
    sb.append("    bpV: ").append(toIndentedString(bpV)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("structure_ID");
    openapiFields.add("kinase");
    openapiFields.add("species");
    openapiFields.add("kinase_ID");
    openapiFields.add("pdb");
    openapiFields.add("alt");
    openapiFields.add("chain");
    openapiFields.add("rmsd1");
    openapiFields.add("rmsd2");
    openapiFields.add("pocket");
    openapiFields.add("resolution");
    openapiFields.add("quality_score");
    openapiFields.add("missing_residues");
    openapiFields.add("missing_atoms");
    openapiFields.add("ligand");
    openapiFields.add("allosteric_ligand");
    openapiFields.add("DFG");
    openapiFields.add("aC_helix");
    openapiFields.add("Grich_distance");
    openapiFields.add("Grich_angle");
    openapiFields.add("Grich_rotation");
    openapiFields.add("front");
    openapiFields.add("gate");
    openapiFields.add("back");
    openapiFields.add("fp_I");
    openapiFields.add("fp_II");
    openapiFields.add("bp_I_A");
    openapiFields.add("bp_I_B");
    openapiFields.add("bp_II_in");
    openapiFields.add("bp_II_A_in");
    openapiFields.add("bp_II_B_in");
    openapiFields.add("bp_II_out");
    openapiFields.add("bp_II_B");
    openapiFields.add("bp_III");
    openapiFields.add("bp_IV");
    openapiFields.add("bp_V");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("structure_ID");
    openapiRequiredFields.add("species");
    openapiRequiredFields.add("kinase_ID");
    openapiRequiredFields.add("pdb");
    openapiRequiredFields.add("chain");
    openapiRequiredFields.add("rmsd1");
    openapiRequiredFields.add("rmsd2");
    openapiRequiredFields.add("pocket");
    openapiRequiredFields.add("quality_score");
    openapiRequiredFields.add("missing_residues");
    openapiRequiredFields.add("missing_atoms");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StructureDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StructureDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StructureDetails is not found in the empty JSON string", StructureDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StructureDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StructureDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StructureDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kinase") != null && !jsonObj.get("kinase").isJsonNull()) && !jsonObj.get("kinase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kinase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kinase").toString()));
      }
      if (!jsonObj.get("species").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `species` to be a primitive type in the JSON string but got `%s`", jsonObj.get("species").toString()));
      }
      if (!jsonObj.get("pdb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdb").toString()));
      }
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if (!jsonObj.get("chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain").toString()));
      }
      if (!jsonObj.get("pocket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pocket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pocket").toString()));
      }
      if ((jsonObj.get("ligand") != null && !jsonObj.get("ligand").isJsonNull()) && !jsonObj.get("ligand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ligand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ligand").toString()));
      }
      if ((jsonObj.get("allosteric_ligand") != null && !jsonObj.get("allosteric_ligand").isJsonNull()) && !jsonObj.get("allosteric_ligand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allosteric_ligand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allosteric_ligand").toString()));
      }
      if ((jsonObj.get("DFG") != null && !jsonObj.get("DFG").isJsonNull()) && !jsonObj.get("DFG").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DFG` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DFG").toString()));
      }
      if ((jsonObj.get("aC_helix") != null && !jsonObj.get("aC_helix").isJsonNull()) && !jsonObj.get("aC_helix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aC_helix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aC_helix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StructureDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StructureDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StructureDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StructureDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<StructureDetails>() {
           @Override
           public void write(JsonWriter out, StructureDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StructureDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StructureDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StructureDetails
  * @throws IOException if the JSON string is invalid with respect to StructureDetails
  */
  public static StructureDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StructureDetails.class);
  }

 /**
  * Convert an instance of StructureDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

