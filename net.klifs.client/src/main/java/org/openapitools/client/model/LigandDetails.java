/*
 * KLIFS API
 * Dynamically interact with the rich content of KLIFS: the structural kinase database
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LigandDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-21T14:12:18.837505154+01:00[Europe/Amsterdam]")
public class LigandDetails {
  public static final String SERIALIZED_NAME_LIGAND_I_D = "ligand_ID";
  @SerializedName(SERIALIZED_NAME_LIGAND_I_D)
  private Integer ligandID;

  public static final String SERIALIZED_NAME_PD_B_CODE = "PDB-code";
  @SerializedName(SERIALIZED_NAME_PD_B_CODE)
  private String pdBCode;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_S_M_I_L_E_S = "SMILES";
  @SerializedName(SERIALIZED_NAME_S_M_I_L_E_S)
  private String SMILES;

  public static final String SERIALIZED_NAME_IN_CH_I_KEY = "InChIKey";
  @SerializedName(SERIALIZED_NAME_IN_CH_I_KEY)
  private String inChIKey;

  public LigandDetails() {
  }

  public LigandDetails ligandID(Integer ligandID) {
    
    this.ligandID = ligandID;
    return this;
  }

   /**
   * KLIFS ID for a specific kinase structure
   * @return ligandID
  **/
  @javax.annotation.Nonnull
  public Integer getLigandID() {
    return ligandID;
  }


  public void setLigandID(Integer ligandID) {
    this.ligandID = ligandID;
  }


  public LigandDetails pdBCode(String pdBCode) {
    
    this.pdBCode = pdBCode;
    return this;
  }

   /**
   * 3-letter PDB-code for a specific ligand
   * @return pdBCode
  **/
  @javax.annotation.Nonnull
  public String getPdBCode() {
    return pdBCode;
  }


  public void setPdBCode(String pdBCode) {
    this.pdBCode = pdBCode;
  }


  public LigandDetails name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the ligand
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public LigandDetails SMILES(String SMILES) {
    
    this.SMILES = SMILES;
    return this;
  }

   /**
   * SMILES code for a specific ligand
   * @return SMILES
  **/
  @javax.annotation.Nullable
  public String getSMILES() {
    return SMILES;
  }


  public void setSMILES(String SMILES) {
    this.SMILES = SMILES;
  }


  public LigandDetails inChIKey(String inChIKey) {
    
    this.inChIKey = inChIKey;
    return this;
  }

   /**
   * InChiKey of a specific ligand
   * @return inChIKey
  **/
  @javax.annotation.Nullable
  public String getInChIKey() {
    return inChIKey;
  }


  public void setInChIKey(String inChIKey) {
    this.inChIKey = inChIKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LigandDetails ligandDetails = (LigandDetails) o;
    return Objects.equals(this.ligandID, ligandDetails.ligandID) &&
        Objects.equals(this.pdBCode, ligandDetails.pdBCode) &&
        Objects.equals(this.name, ligandDetails.name) &&
        Objects.equals(this.SMILES, ligandDetails.SMILES) &&
        Objects.equals(this.inChIKey, ligandDetails.inChIKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ligandID, pdBCode, name, SMILES, inChIKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LigandDetails {\n");
    sb.append("    ligandID: ").append(toIndentedString(ligandID)).append("\n");
    sb.append("    pdBCode: ").append(toIndentedString(pdBCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    SMILES: ").append(toIndentedString(SMILES)).append("\n");
    sb.append("    inChIKey: ").append(toIndentedString(inChIKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ligand_ID");
    openapiFields.add("PDB-code");
    openapiFields.add("Name");
    openapiFields.add("SMILES");
    openapiFields.add("InChIKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ligand_ID");
    openapiRequiredFields.add("PDB-code");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LigandDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LigandDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LigandDetails is not found in the empty JSON string", LigandDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LigandDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LigandDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LigandDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PDB-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PDB-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PDB-code").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SMILES") != null && !jsonObj.get("SMILES").isJsonNull()) && !jsonObj.get("SMILES").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SMILES` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SMILES").toString()));
      }
      if ((jsonObj.get("InChIKey") != null && !jsonObj.get("InChIKey").isJsonNull()) && !jsonObj.get("InChIKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InChIKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InChIKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LigandDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LigandDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LigandDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LigandDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LigandDetails>() {
           @Override
           public void write(JsonWriter out, LigandDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LigandDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LigandDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LigandDetails
  * @throws IOException if the JSON string is invalid with respect to LigandDetails
  */
  public static LigandDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LigandDetails.class);
  }

 /**
  * Convert an instance of LigandDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

