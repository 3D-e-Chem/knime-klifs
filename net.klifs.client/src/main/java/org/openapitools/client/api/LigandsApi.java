/*
 * KLIFS API
 * Dynamically interact with the rich content of KLIFS: the structural kinase database
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BioactivityDetails;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LigandDetails;
import org.openapitools.client.model.StructureDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LigandsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LigandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LigandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bioactivityListIdGet
     * @param ligandID KLIFS ID of the ligand for which the bioactivities are requested (e.g. 28 for staurosporine). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bioactivityListIdGetCall(Integer ligandID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioactivity_list_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ligandID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ligand_ID", ligandID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bioactivityListIdGetValidateBeforeCall(Integer ligandID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ligandID' is set
        if (ligandID == null) {
            throw new ApiException("Missing the required parameter 'ligandID' when calling bioactivityListIdGet(Async)");
        }

        return bioactivityListIdGetCall(ligandID, _callback);

    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand ID. 
     * @param ligandID KLIFS ID of the ligand for which the bioactivities are requested (e.g. 28 for staurosporine). (required)
     * @return List&lt;BioactivityDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<BioactivityDetails> bioactivityListIdGet(Integer ligandID) throws ApiException {
        ApiResponse<List<BioactivityDetails>> localVarResp = bioactivityListIdGetWithHttpInfo(ligandID);
        return localVarResp.getData();
    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand ID. 
     * @param ligandID KLIFS ID of the ligand for which the bioactivities are requested (e.g. 28 for staurosporine). (required)
     * @return ApiResponse&lt;List&lt;BioactivityDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BioactivityDetails>> bioactivityListIdGetWithHttpInfo(Integer ligandID) throws ApiException {
        okhttp3.Call localVarCall = bioactivityListIdGetValidateBeforeCall(ligandID, null);
        Type localVarReturnType = new TypeToken<List<BioactivityDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand (asynchronously)
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand ID. 
     * @param ligandID KLIFS ID of the ligand for which the bioactivities are requested (e.g. 28 for staurosporine). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bioactivityListIdGetAsync(Integer ligandID, final ApiCallback<List<BioactivityDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bioactivityListIdGetValidateBeforeCall(ligandID, _callback);
        Type localVarReturnType = new TypeToken<List<BioactivityDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bioactivityListPdbGet
     * @param ligandPDB The PDB HET-code of the ligand for which the bioactivities are requested. (e.g. STU for staurosporine) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bioactivityListPdbGetCall(String ligandPDB, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bioactivity_list_pdb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ligandPDB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ligand_PDB", ligandPDB));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bioactivityListPdbGetValidateBeforeCall(String ligandPDB, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ligandPDB' is set
        if (ligandPDB == null) {
            throw new ApiException("Missing the required parameter 'ligandPDB' when calling bioactivityListPdbGet(Async)");
        }

        return bioactivityListPdbGetCall(ligandPDB, _callback);

    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand PDB HET-code.
     * @param ligandPDB The PDB HET-code of the ligand for which the bioactivities are requested. (e.g. STU for staurosporine) (required)
     * @return List&lt;BioactivityDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<BioactivityDetails> bioactivityListPdbGet(String ligandPDB) throws ApiException {
        ApiResponse<List<BioactivityDetails>> localVarResp = bioactivityListPdbGetWithHttpInfo(ligandPDB);
        return localVarResp.getData();
    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand PDB HET-code.
     * @param ligandPDB The PDB HET-code of the ligand for which the bioactivities are requested. (e.g. STU for staurosporine) (required)
     * @return ApiResponse&lt;List&lt;BioactivityDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BioactivityDetails>> bioactivityListPdbGetWithHttpInfo(String ligandPDB) throws ApiException {
        okhttp3.Call localVarCall = bioactivityListPdbGetValidateBeforeCall(ligandPDB, null);
        Type localVarReturnType = new TypeToken<List<BioactivityDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all ChEMBL kinase bioactivities for a specific ligand (asynchronously)
     * The Bioactivity list endpoint returns a list of all known ChEMBL kinase bioactivities for a given ligand as specified by the ligand PDB HET-code.
     * @param ligandPDB The PDB HET-code of the ligand for which the bioactivities are requested. (e.g. STU for staurosporine) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of bioactivities </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bioactivityListPdbGetAsync(String ligandPDB, final ApiCallback<List<BioactivityDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bioactivityListPdbGetValidateBeforeCall(ligandPDB, _callback);
        Type localVarReturnType = new TypeToken<List<BioactivityDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ligandsListGet
     * @param kinaseID ID(s) of the kinase(s) for which all structures are requested. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of ligand details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ligandsListGetCall(List<Integer> kinaseID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ligands_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kinaseID != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "kinase_ID", kinaseID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ligandsListGetValidateBeforeCall(List<Integer> kinaseID, final ApiCallback _callback) throws ApiException {
        return ligandsListGetCall(kinaseID, _callback);

    }

    /**
     * Get all co-crystallized ligands optionally restricted to a set of kinase IDs
     * The Ligands List endpoint returns a list of co-crystallized ligands in KLIFS optiontally restricted to a set of specific kinase IDs. 
     * @param kinaseID ID(s) of the kinase(s) for which all structures are requested. (optional)
     * @return List&lt;LigandDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of ligand details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<LigandDetails> ligandsListGet(List<Integer> kinaseID) throws ApiException {
        ApiResponse<List<LigandDetails>> localVarResp = ligandsListGetWithHttpInfo(kinaseID);
        return localVarResp.getData();
    }

    /**
     * Get all co-crystallized ligands optionally restricted to a set of kinase IDs
     * The Ligands List endpoint returns a list of co-crystallized ligands in KLIFS optiontally restricted to a set of specific kinase IDs. 
     * @param kinaseID ID(s) of the kinase(s) for which all structures are requested. (optional)
     * @return ApiResponse&lt;List&lt;LigandDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of ligand details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LigandDetails>> ligandsListGetWithHttpInfo(List<Integer> kinaseID) throws ApiException {
        okhttp3.Call localVarCall = ligandsListGetValidateBeforeCall(kinaseID, null);
        Type localVarReturnType = new TypeToken<List<LigandDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all co-crystallized ligands optionally restricted to a set of kinase IDs (asynchronously)
     * The Ligands List endpoint returns a list of co-crystallized ligands in KLIFS optiontally restricted to a set of specific kinase IDs. 
     * @param kinaseID ID(s) of the kinase(s) for which all structures are requested. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of ligand details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ligandsListGetAsync(List<Integer> kinaseID, final ApiCallback<List<LigandDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ligandsListGetValidateBeforeCall(kinaseID, _callback);
        Type localVarReturnType = new TypeToken<List<LigandDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ligandsListStructuresGet
     * @param ligandID ID(s) of the ligand(s) for which all structures are requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of structure details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ligandsListStructuresGetCall(List<Integer> ligandID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ligands_list_structures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ligandID != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ligand_ID", ligandID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ligandsListStructuresGetValidateBeforeCall(List<Integer> ligandID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ligandID' is set
        if (ligandID == null) {
            throw new ApiException("Missing the required parameter 'ligandID' when calling ligandsListStructuresGet(Async)");
        }

        return ligandsListStructuresGetCall(ligandID, _callback);

    }

    /**
     * Get all structures in complex with one of the provided ligand IDs
     * The Ligands Get Structures endpoint returns a list of monomers of crystal structures in KLIFS in complex with provided ligand IDs. 
     * @param ligandID ID(s) of the ligand(s) for which all structures are requested. (required)
     * @return List&lt;StructureDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of structure details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<StructureDetails> ligandsListStructuresGet(List<Integer> ligandID) throws ApiException {
        ApiResponse<List<StructureDetails>> localVarResp = ligandsListStructuresGetWithHttpInfo(ligandID);
        return localVarResp.getData();
    }

    /**
     * Get all structures in complex with one of the provided ligand IDs
     * The Ligands Get Structures endpoint returns a list of monomers of crystal structures in KLIFS in complex with provided ligand IDs. 
     * @param ligandID ID(s) of the ligand(s) for which all structures are requested. (required)
     * @return ApiResponse&lt;List&lt;StructureDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of structure details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StructureDetails>> ligandsListStructuresGetWithHttpInfo(List<Integer> ligandID) throws ApiException {
        okhttp3.Call localVarCall = ligandsListStructuresGetValidateBeforeCall(ligandID, null);
        Type localVarReturnType = new TypeToken<List<StructureDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all structures in complex with one of the provided ligand IDs (asynchronously)
     * The Ligands Get Structures endpoint returns a list of monomers of crystal structures in KLIFS in complex with provided ligand IDs. 
     * @param ligandID ID(s) of the ligand(s) for which all structures are requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of structure details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ligandsListStructuresGetAsync(List<Integer> ligandID, final ApiCallback<List<StructureDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ligandsListStructuresGetValidateBeforeCall(ligandID, _callback);
        Type localVarReturnType = new TypeToken<List<StructureDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
