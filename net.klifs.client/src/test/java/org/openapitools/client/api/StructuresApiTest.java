/*
 * KLIFS API
 * Dynamically interact with the rich content of KLIFS: the structural kinase database
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.StructureDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StructuresApi
 */
@Disabled
public class StructuresApiTest {

    private final StructuresApi api = new StructuresApi();

    /**
     * Get full complex
     *
     * The Get Kinase Complex endpoint returns the full structure (including solvent, cofactors, ligands, etc.) in MOL2 format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureGetComplexGetTest() throws ApiException {
        Integer structureID = null;
        File response = api.structureGetComplexGet(structureID);
        // TODO: test validations
    }

    /**
     * Get ligand from structure
     *
     * The Get kinase ligand endpoint returns the orthosteric ligand of a specific structure in MOL2 format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureGetLigandGetTest() throws ApiException {
        Integer structureID = null;
        File response = api.structureGetLigandGet(structureID);
        // TODO: test validations
    }

    /**
     * Get full complex in PDB format
     *
     * The Get Kinase PDB Complex endpoint returns the full structure (including solvent, cofactors, ligands, etc.) in PDB format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureGetPdbComplexGetTest() throws ApiException {
        Integer structureID = null;
        File response = api.structureGetPdbComplexGet(structureID);
        // TODO: test validations
    }

    /**
     * Get pocket from structure
     *
     * The Get kinase pocket endpoint returns only the KLIFS pocket of a specific structure (excluding solvent, cofactors, ligands, etc.) in MOL2 format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureGetPocketGetTest() throws ApiException {
        Integer structureID = null;
        File response = api.structureGetPocketGet(structureID);
        // TODO: test validations
    }

    /**
     * Get protein from structure
     *
     * The Get kinase protein endpoint returns the full protein of a specific structure (excluding solvent, cofactors, ligands, etc.) in MOL2 format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureGetProteinGetTest() throws ApiException {
        Integer structureID = null;
        File response = api.structureGetProteinGet(structureID);
        // TODO: test validations
    }

    /**
     * Get all structural information based on a structure ID
     *
     * The Structure list endpoint returns a information of the indicated kinase structures in KLIFS based on a specific structure ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structureListGetTest() throws ApiException {
        List<Integer> structureID = null;
        List<StructureDetails> response = api.structureListGet(structureID);
        // TODO: test validations
    }

    /**
     * Get all structures based on a kinase ID
     *
     * The Structures list endpoint returns a list of available kinase structures in KLIFS based on a specific kinase ID (e.g. kinase ID 392, which is the ID for ABL1). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structuresListGetTest() throws ApiException {
        List<Integer> kinaseID = null;
        List<StructureDetails> response = api.structuresListGet(kinaseID);
        // TODO: test validations
    }

    /**
     * Get all structures based on a set of PDB-codes
     *
     * The Structures PDB list endpoint returns a list of available kinase structures in KLIFS based on a set of 4-letter PDB-codes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void structuresPdbListGetTest() throws ApiException {
        List<String> pdbCodes = null;
        List<StructureDetails> response = api.structuresPdbListGet(pdbCodes);
        // TODO: test validations
    }

}
